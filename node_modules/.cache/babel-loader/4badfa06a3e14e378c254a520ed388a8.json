{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/pages/Governance.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oralce_ABI.json'; // Ensure the ABI is updated with the latest methods\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0xE62a3277429B9F26C466D31157D50CaE97561e7C';\n\nconst Governance = () => {\n  _s();\n\n  const {\n    currentAccount,\n    networkProvider\n  } = useContext(AppContext);\n  const [daoContract, setDaoContract] = useState(null);\n  const [proposals, setProposals] = useState([]);\n  const [newProposalDescription, setNewProposalDescription] = useState('');\n  useEffect(() => {\n    if (networkProvider && currentAccount) {\n      const signer = networkProvider.getSigner();\n      const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n      setDaoContract(contract);\n      fetchProposals();\n    }\n  }, [networkProvider, currentAccount]);\n\n  const fetchProposals = async () => {\n    const proposalCount = await daoContract.getProposalCount();\n    const fetchedProposals = [];\n\n    for (let i = 0; i < proposalCount; i++) {\n      const proposal = await daoContract.proposals(i);\n      fetchedProposals.push(proposal);\n    }\n\n    setProposals(fetchedProposals);\n  };\n\n  const handleNewProposal = async () => {\n    if (!daoContract || !newProposalDescription) return;\n\n    try {\n      const txResponse = await daoContract.openProposal(newProposalDescription, {\n        value: ethers.utils.parseEther(\"10\")\n      });\n      await txResponse.wait();\n      fetchProposals(); // Refresh the list of proposals\n\n      setNewProposalDescription(''); // Clear the input field\n\n      alert('Proposal submitted successfully!');\n    } catch (error) {\n      console.error('Failed to submit proposal:', error);\n      alert('Error submitting proposal');\n    }\n  };\n\n  const buttonStyle = {\n    marginLeft: '1',\n    padding: '10px 20px',\n    borderRadius: '8px',\n    border: 'none',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    cursor: 'pointer'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DAO Proposals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newProposalDescription,\n        onChange: e => setNewProposalDescription(e.target.value),\n        placeholder: \"Enter your proposal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewProposal,\n        style: buttonStyle,\n        children: \"Submit Proposal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Active Proposals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: proposals.map((proposal, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [proposal.description, \" - \", proposal.active ? 'Active' : 'Inactive']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Governance, \"WuA4RwWCskfSXGZ8kf+twXH9rp0=\");\n\n_c = Governance;\nexport default Governance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Governance\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/pages/Governance.js"],"names":["React","useContext","useEffect","useState","ethers","AppContext","OracleABI","contractAddress","Governance","currentAccount","networkProvider","daoContract","setDaoContract","proposals","setProposals","newProposalDescription","setNewProposalDescription","signer","getSigner","contract","Contract","fetchProposals","proposalCount","getProposalCount","fetchedProposals","i","proposal","push","handleNewProposal","txResponse","openProposal","value","utils","parseEther","wait","alert","error","console","buttonStyle","marginLeft","padding","borderRadius","border","backgroundColor","color","cursor","e","target","map","index","description","active"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oralce_ABI.json';  // Ensure the ABI is updated with the latest methods\n\nconst contractAddress = '0xE62a3277429B9F26C466D31157D50CaE97561e7C';\n\nconst Governance = () => {\n    const { currentAccount, networkProvider } = useContext(AppContext);\n    const [daoContract, setDaoContract] = useState(null);\n    const [proposals, setProposals] = useState([]);\n    const [newProposalDescription, setNewProposalDescription] = useState('');\n\n    useEffect(() => {\n        if (networkProvider && currentAccount) {\n            const signer = networkProvider.getSigner();\n            const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n            setDaoContract(contract);\n            fetchProposals();\n        }\n    }, [networkProvider, currentAccount]);\n\n    const fetchProposals = async () => {\n        const proposalCount = await daoContract.getProposalCount();\n        const fetchedProposals = [];\n        for (let i = 0; i < proposalCount; i++) {\n            const proposal = await daoContract.proposals(i);\n            fetchedProposals.push(proposal);\n        }\n        setProposals(fetchedProposals);\n    };\n\n    const handleNewProposal = async () => {\n        if (!daoContract || !newProposalDescription) return;\n\n        try {\n            const txResponse = await daoContract.openProposal(newProposalDescription, {\n                value: ethers.utils.parseEther(\"10\") \n            });\n            await txResponse.wait();\n            fetchProposals();  // Refresh the list of proposals\n            setNewProposalDescription('');  // Clear the input field\n            alert('Proposal submitted successfully!');\n        } catch (error) {\n            console.error('Failed to submit proposal:', error);\n            alert('Error submitting proposal');\n        }\n    };\n\n    const buttonStyle = {\n      marginLeft: '1',\n      padding: '10px 20px',\n      borderRadius: '8px',\n      border: 'none',\n      backgroundColor: '#4CAF50',\n      color: 'white',\n      cursor: 'pointer'\n  };\n\n    return (\n      <div>\n          <h1>DAO Proposals</h1>\n          <div>\n              <input \n                  type=\"text\"\n                  value={newProposalDescription}\n                  onChange={(e) => setNewProposalDescription(e.target.value)}\n                  placeholder=\"Enter your proposal\"\n              />\n              <button onClick={handleNewProposal} style={buttonStyle}>Submit Proposal</button>\n          </div>\n          <h2>Active Proposals</h2>\n          <ul>\n              {proposals.map((proposal, index) => (\n                  <li key={index}>\n                      {proposal.description} - {proposal.active ? 'Active' : 'Inactive'}\n                  </li>\n              ))}\n          </ul>\n      </div>\n  );\n};\n\nexport default Governance;"]},"metadata":{},"sourceType":"module"}