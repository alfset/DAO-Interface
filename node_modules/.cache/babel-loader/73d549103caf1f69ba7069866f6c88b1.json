{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/context/AppContext.js\",\n    _s = $RefreshSig$();\n\n// src/context/AppContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [networkProvider, setNetworkProvider] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  useEffect(() => {\n    async function loadProvider() {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const accounts = await provider.send(\"eth_requestAccounts\", []);\n        const account = accounts[0];\n        setNetworkProvider(provider);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"Ethereum object not found, install MetaMask.\");\n        alert(\"Please install MetaMask!\");\n      }\n    }\n\n    loadProvider();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      networkProvider,\n      currentAccount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppProvider, \"n5olMeTuQ681Jp9swWMFQM/ros0=\");\n\n_c = AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/context/AppContext.js"],"names":["React","createContext","useState","useEffect","ethers","AppContext","AppProvider","children","networkProvider","setNetworkProvider","currentAccount","setCurrentAccount","loadProvider","window","ethereum","provider","providers","Web3Provider","accounts","send","account","console","log","alert"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,EAAhC;AAEP,OAAO,MAAMK,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,YAAf,GAA8B;AAC1B,UAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,cAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;AACA,cAAMI,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAvB;AACA,cAAMC,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACAT,QAAAA,kBAAkB,CAACM,QAAD,CAAlB;AACAJ,QAAAA,iBAAiB,CAACS,OAAD,CAAjB;AACH,OAND,MAMO;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAC,QAAAA,KAAK,CAAC,0BAAD,CAAL;AACH;AACJ;;AAEDX,IAAAA,YAAY;AACf,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,eAAF;AAAmBE,MAAAA;AAAnB,KAA5B;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BM;;GAAMD,W;;KAAAA,W","sourcesContent":["// src/context/AppContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n    const [networkProvider, setNetworkProvider] = useState(null);\n    const [currentAccount, setCurrentAccount] = useState(null);\n\n    useEffect(() => {\n        async function loadProvider() {\n            if (window.ethereum) {\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const accounts = await provider.send(\"eth_requestAccounts\", []);\n                const account = accounts[0];\n                setNetworkProvider(provider);\n                setCurrentAccount(account);\n            } else {\n                console.log(\"Ethereum object not found, install MetaMask.\");\n                alert(\"Please install MetaMask!\");\n            }\n        }\n\n        loadProvider();\n    }, []);\n\n    return (\n        <AppContext.Provider value={{ networkProvider, currentAccount }}>\n            {children}\n        </AppContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}