{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/context/AppContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [network, setNetwork] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Ensure you have MetaMask!\");\n      return;\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      setCurrentAccount(account);\n      updateNetwork();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n\n    ethereum.on('accountsChanged', accounts => {\n      if (accounts.length !== 0) {\n        setCurrentAccount(accounts[0]);\n      } else {\n        setCurrentAccount(null);\n      }\n    });\n    ethereum.on('chainChanged', chainId => {\n      setNetwork(chainId);\n      window.location.reload();\n    });\n  };\n\n  const updateNetwork = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const chainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      setNetwork(chainId);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      currentAccount,\n      network,\n      setCurrentAccount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppProvider, \"5E8EpdAKwArs6xXPvFDYXVfApJI=\");\n\n_c = AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/context/AppContext.js"],"names":["React","createContext","useEffect","useState","AppContext","AppProvider","children","currentAccount","setCurrentAccount","network","setNetwork","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","updateNetwork","on","chainId","location","reload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;;AAEA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,EAAhC;AAEP,OAAO,MAAMI,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMQ,wBAAwB,GAAG,YAAY;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAI,CAACD,QAAL,EAAe;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACH;;AAED,UAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;;AACA,QAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACvB,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAR,MAAAA,iBAAiB,CAACY,OAAD,CAAjB;AACAC,MAAAA,aAAa;AAChB,KAJD,MAIO;AACHP,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;AAEDH,IAAAA,QAAQ,CAACU,EAAT,CAAY,iBAAZ,EAAgCN,QAAD,IAAc;AACzC,UAAIA,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACvBX,QAAAA,iBAAiB,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACH,OAFD,MAEO;AACHR,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ,KAND;AAQAI,IAAAA,QAAQ,CAACU,EAAT,CAAY,cAAZ,EAA6BC,OAAD,IAAa;AACrCb,MAAAA,UAAU,CAACa,OAAD,CAAV;AACAV,MAAAA,MAAM,CAACW,QAAP,CAAgBC,MAAhB;AACH,KAHD;AAIH,GA5BD;;AA8BA,QAAMJ,aAAa,GAAG,YAAY;AAC9B,UAAM;AAAET,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAJ,EAAc;AACV,YAAMW,OAAO,GAAG,MAAMX,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAtB;AACAR,MAAAA,UAAU,CAACa,OAAD,CAAV;AACH;AACJ,GAND;;AAQArB,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,wBAAwB;AAC3B,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,cAAF;AAAkBE,MAAAA,OAAlB;AAA2BD,MAAAA;AAA3B,KAA5B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnDM;;GAAMD,W;;KAAAA,W","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n    const [currentAccount, setCurrentAccount] = useState(null);\n    const [network, setNetwork] = useState(null);\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window;\n        if (!ethereum) {\n            console.log(\"Ensure you have MetaMask!\");\n            return;\n        }\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        if (accounts.length !== 0) {\n            const account = accounts[0];\n            setCurrentAccount(account);\n            updateNetwork();\n        } else {\n            console.log(\"No authorized account found\");\n        }\n\n        ethereum.on('accountsChanged', (accounts) => {\n            if (accounts.length !== 0) {\n                setCurrentAccount(accounts[0]);\n            } else {\n                setCurrentAccount(null);\n            }\n        });\n\n        ethereum.on('chainChanged', (chainId) => {\n            setNetwork(chainId);\n            window.location.reload();\n        });\n    };\n\n    const updateNetwork = async () => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const chainId = await ethereum.request({ method: 'eth_chainId' });\n            setNetwork(chainId);\n        }\n    };\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    return (\n        <AppContext.Provider value={{ currentAccount, network, setCurrentAccount }}>\n            {children}\n        </AppContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}