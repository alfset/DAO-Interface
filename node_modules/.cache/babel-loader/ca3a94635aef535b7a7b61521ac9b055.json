{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/context/AppContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [networkProvider, setNetworkProvider] = useState(null);\n  useEffect(() => {\n    const ethereum = window.ethereum;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    }\n\n    const checkIfWalletIsConnected = async () => {\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length > 0) {\n        setCurrentAccount(accounts[0]);\n      }\n\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      setNetworkProvider(provider);\n    };\n\n    checkIfWalletIsConnected();\n\n    const handleAccountsChanged = accounts => {\n      if (accounts.length === 0) {\n        console.log(\"Please connect to MetaMask.\");\n      } else {\n        setCurrentAccount(accounts[0]);\n      }\n    };\n\n    const handleChainChanged = _chainId => {\n      // Reload the page to reset the DApp state with the new chain's data\n      window.location.reload();\n    };\n\n    if (ethereum.on) {\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('chainChanged', handleChainChanged);\n    }\n\n    return () => {\n      if (ethereum.removeListener) {\n        ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        ethereum.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      currentAccount,\n      networkProvider\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppProvider, \"pov1Prk5TbtBYyvP3BDRJldIqu8=\");\n\n_c = AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/context/AppContext.js"],"names":["React","createContext","useEffect","useState","ethers","AppContext","AppProvider","children","currentAccount","setCurrentAccount","networkProvider","setNetworkProvider","ethereum","window","console","log","checkIfWalletIsConnected","accounts","request","method","length","provider","providers","Web3Provider","handleAccountsChanged","handleChainChanged","_chainId","location","reload","on","removeListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,EAAhC;AAEP,OAAO,MAAMK,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,IAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,QAAQ,GAAGC,MAAM,CAACD,QAAxB;;AAEA,QAAI,CAACA,QAAL,EAAe;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA;AACH;;AAED,UAAMC,wBAAwB,GAAG,YAAY;AACzC,YAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;;AACA,UAAIF,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AACrBX,QAAAA,iBAAiB,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACH;;AAED,YAAMI,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCX,QAAlC,CAAjB;AACAD,MAAAA,kBAAkB,CAACU,QAAD,CAAlB;AACH,KARD;;AAUAL,IAAAA,wBAAwB;;AAExB,UAAMQ,qBAAqB,GAAIP,QAAD,IAAc;AACxC,UAAIA,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACvBN,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,OAFD,MAEO;AACHN,QAAAA,iBAAiB,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACH;AACJ,KAND;;AAQA,UAAMQ,kBAAkB,GAAIC,QAAD,IAAc;AACrC;AACAb,MAAAA,MAAM,CAACc,QAAP,CAAgBC,MAAhB;AACH,KAHD;;AAKA,QAAIhB,QAAQ,CAACiB,EAAb,EAAiB;AACbjB,MAAAA,QAAQ,CAACiB,EAAT,CAAY,iBAAZ,EAA+BL,qBAA/B;AACAZ,MAAAA,QAAQ,CAACiB,EAAT,CAAY,cAAZ,EAA4BJ,kBAA5B;AACH;;AAED,WAAO,MAAM;AACT,UAAIb,QAAQ,CAACkB,cAAb,EAA6B;AACzBlB,QAAAA,QAAQ,CAACkB,cAAT,CAAwB,iBAAxB,EAA2CN,qBAA3C;AACAZ,QAAAA,QAAQ,CAACkB,cAAT,CAAwB,cAAxB,EAAwCL,kBAAxC;AACH;AACJ,KALD;AAMH,GA5CQ,EA4CN,EA5CM,CAAT;AA8CA,sBACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEjB,MAAAA,cAAF;AAAkBE,MAAAA;AAAlB,KAA5B;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvDM;;GAAMD,W;;KAAAA,W","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n    const [currentAccount, setCurrentAccount] = useState(null);\n    const [networkProvider, setNetworkProvider] = useState(null);\n\n    useEffect(() => {\n        const ethereum = window.ethereum;\n    \n        if (!ethereum) {\n            console.log(\"Make sure you have MetaMask!\");\n            return;\n        }\n    \n        const checkIfWalletIsConnected = async () => {\n            const accounts = await ethereum.request({ method: 'eth_accounts' });\n            if (accounts.length > 0) {\n                setCurrentAccount(accounts[0]);\n            }\n    \n            const provider = new ethers.providers.Web3Provider(ethereum);\n            setNetworkProvider(provider);\n        };\n    \n        checkIfWalletIsConnected();\n    \n        const handleAccountsChanged = (accounts) => {\n            if (accounts.length === 0) {\n                console.log(\"Please connect to MetaMask.\");\n            } else {\n                setCurrentAccount(accounts[0]);\n            }\n        };\n    \n        const handleChainChanged = (_chainId) => {\n            // Reload the page to reset the DApp state with the new chain's data\n            window.location.reload();\n        };\n    \n        if (ethereum.on) {\n            ethereum.on('accountsChanged', handleAccountsChanged);\n            ethereum.on('chainChanged', handleChainChanged);\n        }\n    \n        return () => {\n            if (ethereum.removeListener) {\n                ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                ethereum.removeListener('chainChanged', handleChainChanged);\n            }\n        };\n    }, []);\n    \n    return (\n        <AppContext.Provider value={{ currentAccount, networkProvider }}>\n            {children}\n        </AppContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}