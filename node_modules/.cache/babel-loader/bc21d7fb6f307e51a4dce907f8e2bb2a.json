{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/pages/DAO.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oracle_ABI.jso';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddresses = {\n  '61': '0x02f3A4bB77fF782A1F9ADeBF392D36390b10fd47',\n  // BSC Testnet\n  '1ba5': '0xE62a3277429B9F26C466D31157D50CaE97561e7C',\n  // Planq Testnet\n  '8274f': '0x730de67Bf353F8d9B2648Cf0af9681b265f06b3A' // Scroll Testnet\n\n};\nconst tickers = {\n  '61': 'TBNB',\n  '1ba5': 'TPLANQ',\n  '8274f': 'ETH'\n};\n\nconst DAO = () => {\n  _s();\n\n  const {\n    currentAccount,\n    networkProvider\n  } = useContext(AppContext);\n  const [daoContract, setDaoContract] = useState(null);\n  const [chainId, setChainId] = useState('');\n  const [stakedAmount, setStakedAmount] = useState('0');\n  const [members, setMembers] = useState([]);\n  const [additionalStake, setAdditionalStake] = useState('');\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [totalProposalFees, setTotalProposalFees] = useState('0');\n  const [totalRequestFees, setTotalRequestFees] = useState('0');\n  const [ticker, setTicker] = useState('');\n  useEffect(() => {\n    if (networkProvider) {\n      networkProvider.getNetwork().then(network => {\n        const hexChainId = network.chainId.toString(16);\n        setChainId(hexChainId);\n        setTicker(tickers[hexChainId] || 'Unknown');\n        const contractAddress = contractAddresses[hexChainId];\n\n        if (contractAddress && currentAccount) {\n          const signer = networkProvider.getSigner();\n          const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n          setDaoContract(contract);\n          fetchStakedAmount(contract, currentAccount);\n          fetchFees(contract);\n          fetchMembers(contract);\n        }\n      });\n    }\n  }, [networkProvider, currentAccount]);\n\n  const fetchStakedAmount = async (contract, account) => {\n    try {\n      const amount = await contract.stakes(account);\n      setStakedAmount(ethers.utils.formatEther(amount));\n    } catch (error) {\n      console.error('Failed to fetch staked amount:', error);\n    }\n  };\n\n  const fetchFees = async contract => {\n    try {\n      const proposalFees = await contract.totalProposalFeesCollected();\n      const requestFees = await contract.totalRequestFeesCollected();\n      setTotalProposalFees(ethers.utils.formatEther(proposalFees));\n      setTotalRequestFees(ethers.utils.formatEther(requestFees));\n    } catch (error) {\n      console.error('Failed to fetch fees:', error);\n    }\n  };\n\n  const fetchMembers = async contract => {\n    const memberCount = await contract.daoMembersCount(); // Adjusted for a hypothetical contract method\n\n    const memberDetails = [];\n\n    for (let i = 0; i < memberCount; i++) {\n      try {\n        const memberAddress = await contract.daoMembers(i);\n        const memberStake = await contract.stakes(memberAddress);\n        memberDetails.push({\n          address: memberAddress,\n          stake: ethers.utils.formatEther(memberStake)\n        });\n      } catch (error) {\n        console.error('Failed to fetch member:', error);\n        break;\n      }\n    }\n\n    setMembers(memberDetails);\n  };\n\n  const joinDAO = async () => {\n    if (!daoContract) return;\n\n    try {\n      const txResponse = await daoContract.joinDAO({\n        value: ethers.utils.parseEther(\"10\")\n      });\n      await txResponse.wait();\n      alert('Successfully joined DAO!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchFees(daoContract);\n      fetchMembers(daoContract);\n    } catch (error) {\n      console.error('Failed to join DAO:', error);\n      alert('Error joining DAO');\n    }\n  };\n\n  const addStake = async () => {\n    if (!daoContract || !additionalStake) return;\n\n    try {\n      const txResponse = await daoContract.addStake({\n        value: ethers.utils.parseEther(additionalStake)\n      });\n      await txResponse.wait();\n      alert('Successfully added stake!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchFees(daoContract);\n      fetchMembers(daoContract);\n      setAdditionalStake('');\n    } catch (error) {\n      console.error('Failed to add stake:', error);\n      alert('Error adding stake');\n    }\n  };\n\n  const withdrawStake = async () => {\n    if (!daoContract || !withdrawAmount) return;\n\n    try {\n      const txResponse = await daoContract.leaveDAO(ethers.utils.parseEther(withdrawAmount));\n      await txResponse.wait();\n      alert('Successfully withdrawn stake!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchMembers(daoContract);\n      setWithdrawAmount('');\n    } catch (error) {\n      console.error('Failed to withdraw stake:', error);\n      alert('Error withdrawing stake');\n    }\n  };\n\n  const inputStyle = {\n    flex: '1',\n    marginRight: '10px',\n    padding: '10px',\n    borderRadius: '8px',\n    border: '1px solid #ccc'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    borderRadius: '8px',\n    border: 'none',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    cursor: 'pointer'\n  };\n  const cardStyle = {\n    backgroundColor: '#1a202c',\n    color: 'white',\n    padding: '20px',\n    borderRadius: '8px',\n    marginBottom: '10px',\n    flex: '1 1 calc(33.333% - 20px)',\n    margin: '10px'\n  };\n  const headerStyle = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '20px',\n    color: 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: headerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        children: \"DAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinDAO,\n        style: buttonStyle,\n        children: \"Join DAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Staked Amount: \", stakedAmount, \" \", ticker]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Proposal Fees Collected: \", totalProposalFees, \" \", ticker]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Request Fees Collected: \", totalRequestFees, \" \", ticker]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: additionalStake,\n        onChange: e => setAdditionalStake(e.target.value),\n        placeholder: `Amount to stake (${ticker})`,\n        style: inputStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addStake,\n        style: buttonStyle,\n        children: \"Add Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: withdrawAmount,\n        onChange: e => setWithdrawAmount(e.target.value),\n        placeholder: `Amount to unstake (${ticker})`,\n        style: inputStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: withdrawStake,\n        style: buttonStyle,\n        children: \"Withdraw Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"DAO Members\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), members.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: members.map((member, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [member.address, \" - \", member.stake, \" \", ticker]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No members found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DAO, \"7sLNhG4k4wTcQXKGHLOOnzFX+LY=\");\n\n_c = DAO;\nexport default DAO;\n\nvar _c;\n\n$RefreshReg$(_c, \"DAO\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/pages/DAO.js"],"names":["React","useContext","useEffect","useState","ethers","AppContext","OracleABI","contractAddresses","tickers","DAO","currentAccount","networkProvider","daoContract","setDaoContract","chainId","setChainId","stakedAmount","setStakedAmount","members","setMembers","additionalStake","setAdditionalStake","withdrawAmount","setWithdrawAmount","totalProposalFees","setTotalProposalFees","totalRequestFees","setTotalRequestFees","ticker","setTicker","getNetwork","then","network","hexChainId","toString","contractAddress","signer","getSigner","contract","Contract","fetchStakedAmount","fetchFees","fetchMembers","account","amount","stakes","utils","formatEther","error","console","proposalFees","totalProposalFeesCollected","requestFees","totalRequestFeesCollected","memberCount","daoMembersCount","memberDetails","i","memberAddress","daoMembers","memberStake","push","address","stake","joinDAO","txResponse","value","parseEther","wait","alert","addStake","withdrawStake","leaveDAO","inputStyle","flex","marginRight","padding","borderRadius","border","buttonStyle","backgroundColor","color","cursor","cardStyle","marginBottom","margin","headerStyle","display","justifyContent","alignItems","flexDirection","flexWrap","e","target","length","map","member","index"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oracle_ABI.jso';\n\nconst contractAddresses = {\n    '61': '0x02f3A4bB77fF782A1F9ADeBF392D36390b10fd47',   // BSC Testnet\n    '1ba5': '0xE62a3277429B9F26C466D31157D50CaE97561e7C', // Planq Testnet\n    '8274f': '0x730de67Bf353F8d9B2648Cf0af9681b265f06b3A' // Scroll Testnet\n};\n\nconst tickers = {\n    '61': 'TBNB',     \n    '1ba5': 'TPLANQ',\n    '8274f': 'ETH',\n};\n\nconst DAO = () => {\n    const { currentAccount, networkProvider } = useContext(AppContext);\n    const [daoContract, setDaoContract] = useState(null);\n    const [chainId, setChainId] = useState('');\n    const [stakedAmount, setStakedAmount] = useState('0');\n    const [members, setMembers] = useState([]);\n    const [additionalStake, setAdditionalStake] = useState('');\n    const [withdrawAmount, setWithdrawAmount] = useState('');\n    const [totalProposalFees, setTotalProposalFees] = useState('0');\n    const [totalRequestFees, setTotalRequestFees] = useState('0');\n    const [ticker, setTicker] = useState('');\n\n    useEffect(() => {\n        if (networkProvider) {\n            networkProvider.getNetwork().then((network) => {\n                const hexChainId = network.chainId.toString(16);\n                setChainId(hexChainId);\n                setTicker(tickers[hexChainId] || 'Unknown');\n                const contractAddress = contractAddresses[hexChainId];\n                if (contractAddress && currentAccount) {\n                    const signer = networkProvider.getSigner();\n                    const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n                    setDaoContract(contract);\n                    fetchStakedAmount(contract, currentAccount);\n                    fetchFees(contract);\n                    fetchMembers(contract);\n                }\n            });\n        }\n    }, [networkProvider, currentAccount]);\n\n    const fetchStakedAmount = async (contract, account) => {\n        try {\n            const amount = await contract.stakes(account);\n            setStakedAmount(ethers.utils.formatEther(amount));\n        } catch (error) {\n            console.error('Failed to fetch staked amount:', error);\n        }\n    };\n\n    const fetchFees = async (contract) => {\n        try {\n            const proposalFees = await contract.totalProposalFeesCollected();\n            const requestFees = await contract.totalRequestFeesCollected();\n            setTotalProposalFees(ethers.utils.formatEther(proposalFees));\n            setTotalRequestFees(ethers.utils.formatEther(requestFees));\n        } catch (error) {\n            console.error('Failed to fetch fees:', error);\n        }\n    };\n\n    const fetchMembers = async (contract) => {\n        const memberCount = await contract.daoMembersCount();  // Adjusted for a hypothetical contract method\n        const memberDetails = [];\n        for (let i = 0; i < memberCount; i++) {\n            try {\n                const memberAddress = await contract.daoMembers(i);\n                const memberStake = await contract.stakes(memberAddress);\n                memberDetails.push({ address: memberAddress, stake: ethers.utils.formatEther(memberStake) });\n            } catch (error) {\n                console.error('Failed to fetch member:', error);\n                break;\n            }\n        }\n        setMembers(memberDetails);\n    };\n\n    const joinDAO = async () => {\n        if (!daoContract) return;\n        try {\n            const txResponse = await daoContract.joinDAO({ value: ethers.utils.parseEther(\"10\") });\n            await txResponse.wait();\n            alert('Successfully joined DAO!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchFees(daoContract);\n            fetchMembers(daoContract);\n        } catch (error) {\n            console.error('Failed to join DAO:', error);\n            alert('Error joining DAO');\n        }\n    };\n\n    const addStake = async () => {\n        if (!daoContract || !additionalStake) return;\n        try {\n            const txResponse = await daoContract.addStake({ value: ethers.utils.parseEther(additionalStake) });\n            await txResponse.wait();\n            alert('Successfully added stake!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchFees(daoContract);\n            fetchMembers(daoContract);\n            setAdditionalStake('');\n        } catch (error) {\n            console.error('Failed to add stake:', error);\n            alert('Error adding stake');\n        }\n    };\n\n    const withdrawStake = async () => {\n        if (!daoContract || !withdrawAmount) return;\n        try {\n            const txResponse = await daoContract.leaveDAO(ethers.utils.parseEther(withdrawAmount));\n            await txResponse.wait();\n            alert('Successfully withdrawn stake!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchMembers(daoContract);\n            setWithdrawAmount('');\n        } catch (error) {\n            console.error('Failed to withdraw stake:', error);\n            alert('Error withdrawing stake');\n        }\n    };\n\n    const inputStyle = {\n        flex: '1',\n        marginRight: '10px',\n        padding: '10px',\n        borderRadius: '8px',\n        border: '1px solid #ccc'\n    };\n\n    const buttonStyle = {\n        padding: '10px 20px',\n        borderRadius: '8px',\n        border: 'none',\n        backgroundColor: '#4CAF50',\n        color: 'white',\n        cursor: 'pointer'\n    };\n\n    const cardStyle = {\n        backgroundColor: '#1a202c',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '10px',\n        flex: '1 1 calc(33.333% - 20px)',\n        margin: '10px',\n    };\n\n    const headerStyle = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginBottom: '20px',\n        color: 'white'\n    };\n\n    return (\n        <div>\n            <div style={headerStyle}>\n                <h1 style={{ color: 'white' }}>DAO</h1>\n                <button onClick={joinDAO} style={buttonStyle}>Join DAO</button>\n            </div>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                flexWrap: 'wrap',\n                justifyContent: 'space-around',\n            }}>\n                <div style={cardStyle}>\n                    <p>Staked Amount: {stakedAmount} {ticker}</p>\n                </div>\n                <div style={cardStyle}>\n                    <p>Total Proposal Fees Collected: {totalProposalFees} {ticker}</p>\n                </div>\n                <div style={cardStyle}>\n                    <p>Total Request Fees Collected: {totalRequestFees} {ticker}</p>\n                </div>\n            </div>\n            <div style={cardStyle}>\n                <input\n                    type=\"text\"\n                    value={additionalStake}\n                    onChange={e => setAdditionalStake(e.target.value)}\n                    placeholder={`Amount to stake (${ticker})`}\n                    style={inputStyle}\n                />\n                <button onClick={addStake} style={buttonStyle}>Add Stake</button>\n            </div>\n            <div style={cardStyle}>\n                <input\n                    type=\"text\"\n                    value={withdrawAmount}\n                    onChange={e => setWithdrawAmount(e.target.value)}\n                    placeholder={`Amount to unstake (${ticker})`}\n                    style={inputStyle}\n                />\n                <button onClick={withdrawStake} style={buttonStyle}>Withdraw Stake</button>\n            </div>\n            <div style={cardStyle}>\n                <h3>DAO Members</h3>\n                {members.length > 0 ? (\n                    <ul>\n                        {members.map((member, index) => (\n                            <li key={index}>{member.address} - {member.stake} {ticker}</li>\n                        ))}\n                    </ul>\n                ) : (\n                    <p>No members found</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default DAO;\n"]},"metadata":{},"sourceType":"module"}