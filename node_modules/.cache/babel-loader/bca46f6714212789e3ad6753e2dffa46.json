{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/pages/DAO.js\",\n    _s = $RefreshSig$();\n\n// src/components/DAO.js\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oralce_ABI.json'; // Ensure the path is correct\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0xE62a3277429B9F26C466D31157D50CaE97561e7C';\n\nconst DAO = () => {\n  _s();\n\n  const {\n    currentAccount,\n    networkProvider\n  } = useContext(AppContext);\n  const [daoContract, setDaoContract] = useState(null);\n  const [stakedAmount, setStakedAmount] = useState('0');\n  const [additionalStake, setAdditionalStake] = useState('');\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [totalProposalFees, setTotalProposalFees] = useState('0');\n  const [totalRequestFees, setTotalRequestFees] = useState('0');\n  useEffect(() => {\n    if (networkProvider && currentAccount) {\n      const signer = networkProvider.getSigner();\n      const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n      setDaoContract(contract);\n      fetchStakedAmount(contract, currentAccount);\n      fetchFees(contract);\n    }\n  }, [networkProvider, currentAccount]);\n\n  const fetchStakedAmount = async (contract, account) => {\n    try {\n      const amount = await contract.stakes(account);\n      setStakedAmount(ethers.utils.formatEther(amount));\n    } catch (error) {\n      console.error('Failed to fetch staked amount:', error);\n    }\n  };\n\n  const fetchFees = async contract => {\n    try {\n      const proposalFees = await contract.totalProposalFeesCollected();\n      const requestFees = await contract.totalRequestFeesCollected();\n      setTotalProposalFees(ethers.utils.formatEther(proposalFees));\n      setTotalRequestFees(ethers.utils.formatEther(requestFees));\n    } catch (error) {\n      console.error('Failed to fetch fees:', error);\n    }\n  };\n\n  const joinDAO = async () => {\n    if (!daoContract) return;\n\n    try {\n      const txResponse = await daoContract.joinDAO({\n        value: ethers.utils.parseEther(\"10\")\n      });\n      await txResponse.wait();\n      alert('Successfully joined DAO!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchFees(daoContract);\n    } catch (error) {\n      console.error('Failed to join DAO:', error);\n      alert('Error joining DAO');\n    }\n  };\n\n  const addStake = async () => {\n    if (!daoContract || !additionalStake) return;\n\n    try {\n      const txResponse = await daoContract.addStake({\n        value: ethers.utils.parseEther(additionalStake)\n      });\n      await txResponse.wait();\n      alert('Successfully added stake!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchFees(daoContract);\n      setAdditionalStake('');\n    } catch (error) {\n      console.error('Failed to add stake:', error);\n      alert('Error adding stake');\n    }\n  };\n\n  const withdrawStake = async () => {\n    if (!daoContract || !withdrawAmount) return;\n\n    try {\n      const txResponse = await daoContract.leaveDAO(ethers.utils.parseEther(withdrawAmount));\n      await txResponse.wait();\n      alert('Successfully withdrawn stake!');\n      fetchStakedAmount(daoContract, currentAccount);\n      setWithdrawAmount('');\n    } catch (error) {\n      console.error('Failed to withdraw stake:', error);\n      alert('Error withdrawing stake');\n    }\n  };\n\n  const cardStyle = {\n    backgroundColor: '#1a202c',\n    color: 'white',\n    padding: '20px',\n    borderRadius: '8px',\n    marginBottom: '10px',\n    flex: '1 1 calc(33.333% - 20px)',\n    // Flex-grow, Flex-shrink, Flex-basis\n    margin: '10px'\n  };\n  const cardsContainerStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DAO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardsContainerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Staked Amount: \", stakedAmount, \" TPLANQ\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Proposal Fees Collected: \", totalProposalFees, \" TPLANQ\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Request Fees Collected: \", totalRequestFees, \" TPLANQ\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinDAO,\n      children: \"Join DAO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: additionalStake,\n        onChange: e => setAdditionalStake(e.target.value),\n        placeholder: \"Amount to stake (TPLANQ)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addStake,\n        children: \"Add Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: withdrawAmount,\n        onChange: e => setWithdrawAmount(e.target.value),\n        placeholder: \"Amount to unstake (TPLANQ)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: withdrawStake,\n        children: \"Withdraw Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DAO, \"knJWlcPDuzSP4syAax4/QUHB4PI=\");\n\n_c = DAO;\nexport default DAO;\n\nvar _c;\n\n$RefreshReg$(_c, \"DAO\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/pages/DAO.js"],"names":["React","useContext","useEffect","useState","ethers","AppContext","OracleABI","contractAddress","DAO","currentAccount","networkProvider","daoContract","setDaoContract","stakedAmount","setStakedAmount","additionalStake","setAdditionalStake","withdrawAmount","setWithdrawAmount","totalProposalFees","setTotalProposalFees","totalRequestFees","setTotalRequestFees","signer","getSigner","contract","Contract","fetchStakedAmount","fetchFees","account","amount","stakes","utils","formatEther","error","console","proposalFees","totalProposalFeesCollected","requestFees","totalRequestFeesCollected","joinDAO","txResponse","value","parseEther","wait","alert","addStake","withdrawStake","leaveDAO","cardStyle","backgroundColor","color","padding","borderRadius","marginBottom","flex","margin","cardsContainerStyle","display","flexWrap","justifyContent","e","target"],"mappings":"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","sourcesContent":["// src/components/DAO.js\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oralce_ABI.json';  // Ensure the path is correct\n\nconst contractAddress = '0xE62a3277429B9F26C466D31157D50CaE97561e7C';\n\nconst DAO = () => {\n    const { currentAccount, networkProvider } = useContext(AppContext);\n    const [daoContract, setDaoContract] = useState(null);\n    const [stakedAmount, setStakedAmount] = useState('0');\n    const [additionalStake, setAdditionalStake] = useState('');\n    const [withdrawAmount, setWithdrawAmount] = useState('');\n    const [totalProposalFees, setTotalProposalFees] = useState('0');\n    const [totalRequestFees, setTotalRequestFees] = useState('0');\n\n    useEffect(() => {\n        if (networkProvider && currentAccount) {\n            const signer = networkProvider.getSigner();\n            const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n            setDaoContract(contract);\n            fetchStakedAmount(contract, currentAccount);\n            fetchFees(contract);\n        }\n    }, [networkProvider, currentAccount]);\n\n    const fetchStakedAmount = async (contract, account) => {\n        try {\n            const amount = await contract.stakes(account);\n            setStakedAmount(ethers.utils.formatEther(amount));\n        } catch (error) {\n            console.error('Failed to fetch staked amount:', error);\n        }\n    };\n\n    const fetchFees = async (contract) => {\n        try {\n            const proposalFees = await contract.totalProposalFeesCollected();\n            const requestFees = await contract.totalRequestFeesCollected();\n            setTotalProposalFees(ethers.utils.formatEther(proposalFees));\n            setTotalRequestFees(ethers.utils.formatEther(requestFees));\n        } catch (error) {\n            console.error('Failed to fetch fees:', error);\n        }\n    };\n\n    const joinDAO = async () => {\n        if (!daoContract) return;\n\n        try {\n            const txResponse = await daoContract.joinDAO({ value: ethers.utils.parseEther(\"10\") });\n            await txResponse.wait();\n            alert('Successfully joined DAO!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchFees(daoContract);\n        } catch (error) {\n            console.error('Failed to join DAO:', error);\n            alert('Error joining DAO');\n        }\n    };\n\n    const addStake = async () => {\n        if (!daoContract || !additionalStake) return;\n\n        try {\n            const txResponse = await daoContract.addStake({ value: ethers.utils.parseEther(additionalStake) });\n            await txResponse.wait();\n            alert('Successfully added stake!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchFees(daoContract);\n            setAdditionalStake('');\n        } catch (error) {\n            console.error('Failed to add stake:', error);\n            alert('Error adding stake');\n        }\n    };\n\n    const withdrawStake = async () => {\n        if (!daoContract || !withdrawAmount) return;\n\n        try {\n            const txResponse = await daoContract.leaveDAO(ethers.utils.parseEther(withdrawAmount));\n            await txResponse.wait();\n            alert('Successfully withdrawn stake!');\n            fetchStakedAmount(daoContract, currentAccount);\n            setWithdrawAmount('');\n        } catch (error) {\n            console.error('Failed to withdraw stake:', error);\n            alert('Error withdrawing stake');\n        }\n    };\n\n    const cardStyle = {\n        backgroundColor: '#1a202c',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '10px',\n        flex: '1 1 calc(33.333% - 20px)', // Flex-grow, Flex-shrink, Flex-basis\n        margin: '10px',\n    };\n\n    const cardsContainerStyle = {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n    };\n\n    return (\n        <div>\n            <h1>DAO</h1>\n            <div style={cardsContainerStyle}>\n                <div style={cardStyle}>\n                    <p>Staked Amount: {stakedAmount} TPLANQ</p>\n                </div>\n                <div style={cardStyle}>\n                    <p>Total Proposal Fees Collected: {totalProposalFees} TPLANQ</p>\n                </div>\n                <div style={cardStyle}>\n                    <p>Total Request Fees Collected: {totalRequestFees} TPLANQ</p>\n                </div>\n            </div>\n            <button onClick={joinDAO}>Join DAO</button>\n            <div style={cardStyle}>\n                <input\n                    type=\"text\"\n                    value={additionalStake}\n                    onChange={e => setAdditionalStake(e.target.value)}\n                    placeholder=\"Amount to stake (TPLANQ)\"\n                />\n                <button onClick={addStake}>Add Stake</button>\n            </div>\n            <div style={cardStyle}>\n                <input\n                    type=\"text\"\n                    value={withdrawAmount}\n                    onChange={e => setWithdrawAmount(e.target.value)}\n                    placeholder=\"Amount to unstake (TPLANQ)\"\n                />\n                <button onClick={withdrawStake}>Withdraw Stake</button>\n            </div>\n        </div>\n    );\n};\n\nexport default DAO;\n"]},"metadata":{},"sourceType":"module"}