{"ast":null,"code":"var _jsxFileName = \"/Users/alf/DAO-Interface/src/pages/DAO.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oralce_ABI.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddresses = {\n  '0x61': '0x02f3A4bB77fF782A1F9ADeBF392D36390b10fd47',\n  // BSC Testnet\n  '0x1ba5': '0xE62a3277429B9F26C466D31157D50CaE97561e7C',\n  // Planq Testnet\n  '0x8274f': '0x730de67Bf353F8d9B2648Cf0af9681b265f06b3A' // Scroll Testnet\n\n};\nconst tickers = {\n  '0x61': 'TBNB',\n  // BSC Testnet\n  '0x1ba5': 'TPLANQ',\n  // Planq Testnet\n  '0x8274f': 'ETH' // Scroll Testnet\n\n};\n\nconst DAO = () => {\n  _s();\n\n  const {\n    currentAccount,\n    networkProvider\n  } = useContext(AppContext);\n  const [daoContract, setDaoContract] = useState(null);\n  const [chainId, setChainId] = useState('');\n  const [stakedAmount, setStakedAmount] = useState('0');\n  const [additionalStake, setAdditionalStake] = useState('');\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [totalProposalFees, setTotalProposalFees] = useState('0');\n  const [totalRequestFees, setTotalRequestFees] = useState('0');\n  const [ticker, setTicker] = useState('TPLANQ'); // Default ticker\n\n  useEffect(() => {\n    if (networkProvider) {\n      networkProvider.getNetwork().then(network => {\n        setChainId(network.chainId.toString(16));\n        const contractAddress = contractAddresses[network.chainId.toString(16)];\n        setTicker(tickers[network.chainId.toString(16)]); // Set ticker based on chain ID\n\n        if (contractAddress && currentAccount) {\n          const signer = networkProvider.getSigner();\n          const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n          setDaoContract(contract);\n          fetchStakedAmount(contract, currentAccount);\n          fetchFees(contract);\n        }\n      });\n    }\n  }, [networkProvider, currentAccount]);\n\n  const fetchStakedAmount = async (contract, account) => {\n    try {\n      const amount = await contract.stakes(account);\n      setStakedAmount(ethers.utils.formatEther(amount));\n    } catch (error) {\n      console.error('Failed to fetch staked amount:', error);\n    }\n  };\n\n  const fetchFees = async contract => {\n    try {\n      const proposalFees = await contract.totalProposalFeesCollected();\n      const requestFees = await contract.totalRequestFeesCollected();\n      setTotalProposalFees(ethers.utils.formatEther(proposalFees));\n      setTotalRequestFees(ethers.utils.formatEther(requestFees));\n    } catch (error) {\n      console.error('Failed to fetch fees:', error);\n    }\n  };\n\n  const joinDAO = async () => {\n    if (!daoContract) return;\n\n    try {\n      const txResponse = await daoContract.joinDAO({\n        value: ethers.utils.parseEther(\"10\")\n      });\n      await txResponse.wait();\n      alert('Successfully joined DAO!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchFees(daoContract);\n    } catch (error) {\n      console.error('Failed to join DAO:', error);\n      alert('Error joining DAO');\n    }\n  };\n\n  const addStake = async () => {\n    if (!daoContract || !additionalStake) return;\n\n    try {\n      const txResponse = await daoContract.addStake({\n        value: ethers.utils.parseEther(additionalStake)\n      });\n      await txResponse.wait();\n      alert('Successfully added stake!');\n      fetchStakedAmount(daoContract, currentAccount);\n      fetchFees(daoContract);\n      setAdditionalStake('');\n    } catch (error) {\n      console.error('Failed to add stake:', error);\n      alert('Error adding stake');\n    }\n  };\n\n  const withdrawStake = async () => {\n    if (!daoContract || !withdrawAmount) return;\n\n    try {\n      const txResponse = await daoContract.leaveDAO(ethers.utils.parseEther(withdrawAmount));\n      await txResponse.wait();\n      alert('Successfully withdrawn stake!');\n      fetchStakedAmount(daoContract, currentAccount);\n      setWithdrawAmount('');\n    } catch (error) {\n      console.error('Failed to withdraw stake:', error);\n      alert('Error withdrawing stake');\n    }\n  };\n\n  const inputStyle = {\n    flex: '1',\n    marginRight: '10px',\n    padding: '10px',\n    borderRadius: '8px',\n    border: '1px solid #ccc'\n  };\n  const buttonStyle = {\n    padding: '10px 20px',\n    borderRadius: '8px',\n    border: 'none',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    cursor: 'pointer'\n  };\n  const cardStyle = {\n    backgroundColor: '#1a202c',\n    color: 'white',\n    padding: '20px',\n    borderRadius: '8px',\n    marginBottom: '10px',\n    flex: '1 1 calc(33.333% - 20px)',\n    margin: '10px'\n  };\n  const headerStyle = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '20px',\n    color: 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: headerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        children: \"DAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinDAO,\n        style: buttonStyle,\n        children: \"Join DAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Staked Amount: \", stakedAmount, \" \", ticker]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Proposal Fees Collected: \", totalProposalFees, \" \", ticker]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Request Fees Collected: \", totalRequestFees, \" \", ticker]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: additionalStake,\n        onChange: e => setAdditionalStake(e.target.value),\n        placeholder: `Amount to stake (${ticker})`,\n        style: inputStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addStake,\n        style: buttonStyle,\n        children: \"Add Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: withdrawAmount,\n        onChange: e => setWithdrawAmount(e.target.value),\n        placeholder: `Amount to unstake (${ticker})`,\n        style: inputStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: withdrawStake,\n        style: buttonStyle,\n        children: \"Withdraw Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DAO, \"Bw7sZqpe5o3MhttTnQ3+baI/nIg=\");\n\n_c = DAO;\nexport default DAO;\n\nvar _c;\n\n$RefreshReg$(_c, \"DAO\");","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/pages/DAO.js"],"names":["React","useContext","useEffect","useState","ethers","AppContext","OracleABI","contractAddresses","tickers","DAO","currentAccount","networkProvider","daoContract","setDaoContract","chainId","setChainId","stakedAmount","setStakedAmount","additionalStake","setAdditionalStake","withdrawAmount","setWithdrawAmount","totalProposalFees","setTotalProposalFees","totalRequestFees","setTotalRequestFees","ticker","setTicker","getNetwork","then","network","toString","contractAddress","signer","getSigner","contract","Contract","fetchStakedAmount","fetchFees","account","amount","stakes","utils","formatEther","error","console","proposalFees","totalProposalFeesCollected","requestFees","totalRequestFeesCollected","joinDAO","txResponse","value","parseEther","wait","alert","addStake","withdrawStake","leaveDAO","inputStyle","flex","marginRight","padding","borderRadius","border","buttonStyle","backgroundColor","color","cursor","cardStyle","marginBottom","margin","headerStyle","display","justifyContent","alignItems","flexDirection","flexWrap","e","target"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { AppContext } from '../context/AppContext';\nimport OracleABI from '../utils/abis/Oralce_ABI.json';\n\nconst contractAddresses = {\n  '0x61': '0x02f3A4bB77fF782A1F9ADeBF392D36390b10fd47',   // BSC Testnet\n  '0x1ba5': '0xE62a3277429B9F26C466D31157D50CaE97561e7C', // Planq Testnet\n  '0x8274f': '0x730de67Bf353F8d9B2648Cf0af9681b265f06b3A' // Scroll Testnet\n};\n\nconst tickers = {\n  '0x61': 'TBNB',     // BSC Testnet\n  '0x1ba5': 'TPLANQ', // Planq Testnet\n  '0x8274f': 'ETH'    // Scroll Testnet\n};\n\nconst DAO = () => {\n    const { currentAccount, networkProvider } = useContext(AppContext);\n    const [daoContract, setDaoContract] = useState(null);\n    const [chainId, setChainId] = useState('');\n    const [stakedAmount, setStakedAmount] = useState('0');\n    const [additionalStake, setAdditionalStake] = useState('');\n    const [withdrawAmount, setWithdrawAmount] = useState('');\n    const [totalProposalFees, setTotalProposalFees] = useState('0');\n    const [totalRequestFees, setTotalRequestFees] = useState('0');\n    const [ticker, setTicker] = useState('TPLANQ'); // Default ticker\n\n    useEffect(() => {\n        if (networkProvider) {\n            networkProvider.getNetwork().then((network) => {\n                setChainId(network.chainId.toString(16));\n                const contractAddress = contractAddresses[network.chainId.toString(16)];\n                setTicker(tickers[network.chainId.toString(16)]); // Set ticker based on chain ID\n                if (contractAddress && currentAccount) {\n                    const signer = networkProvider.getSigner();\n                    const contract = new ethers.Contract(contractAddress, OracleABI, signer);\n                    setDaoContract(contract);\n                    fetchStakedAmount(contract, currentAccount);\n                    fetchFees(contract);\n                }\n            });\n        }\n    }, [networkProvider, currentAccount]);\n\n    const fetchStakedAmount = async (contract, account) => {\n        try {\n            const amount = await contract.stakes(account);\n            setStakedAmount(ethers.utils.formatEther(amount));\n        } catch (error) {\n            console.error('Failed to fetch staked amount:', error);\n        }\n    };\n\n    const fetchFees = async (contract) => {\n        try {\n            const proposalFees = await contract.totalProposalFeesCollected();\n            const requestFees = await contract.totalRequestFeesCollected();\n            setTotalProposalFees(ethers.utils.formatEther(proposalFees));\n            setTotalRequestFees(ethers.utils.formatEther(requestFees));\n        } catch (error) {\n            console.error('Failed to fetch fees:', error);\n        }\n    };\n\n    const joinDAO = async () => {\n        if (!daoContract) return;\n\n        try {\n            const txResponse = await daoContract.joinDAO({ value: ethers.utils.parseEther(\"10\") });\n            await txResponse.wait();\n            alert('Successfully joined DAO!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchFees(daoContract);\n        } catch (error) {\n            console.error('Failed to join DAO:', error);\n            alert('Error joining DAO');\n        }\n    };\n\n    const addStake = async () => {\n        if (!daoContract || !additionalStake) return;\n\n        try {\n            const txResponse = await daoContract.addStake({ value: ethers.utils.parseEther(additionalStake) });\n            await txResponse.wait();\n            alert('Successfully added stake!');\n            fetchStakedAmount(daoContract, currentAccount);\n            fetchFees(daoContract);\n            setAdditionalStake('');\n        } catch (error) {\n            console.error('Failed to add stake:', error);\n            alert('Error adding stake');\n        }\n    };\n\n    const withdrawStake = async () => {\n        if (!daoContract || !withdrawAmount) return;\n\n        try {\n            const txResponse = await daoContract.leaveDAO(ethers.utils.parseEther(withdrawAmount));\n            await txResponse.wait();\n            alert('Successfully withdrawn stake!');\n            fetchStakedAmount(daoContract, currentAccount);\n            setWithdrawAmount('');\n        } catch (error) {\n            console.error('Failed to withdraw stake:', error);\n            alert('Error withdrawing stake');\n        }\n    };\n\n    const inputStyle = {\n        flex: '1',\n        marginRight: '10px',\n        padding: '10px',\n        borderRadius: '8px',\n        border: '1px solid #ccc'\n    };\n\n    const buttonStyle = {\n        padding: '10px 20px',\n        borderRadius: '8px',\n        border: 'none',\n        backgroundColor: '#4CAF50',\n        color: 'white',\n        cursor: 'pointer'\n    };\n\n    const cardStyle = {\n        backgroundColor: '#1a202c',\n        color: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        marginBottom: '10px',\n        flex: '1 1 calc(33.333% - 20px)',\n        margin: '10px',\n    };\n\n    const headerStyle = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginBottom: '20px',\n        color: 'white'\n    };\n\n    return (\n        <div>\n            <div style={headerStyle}>\n                <h1 style={{ color: 'white' }}>DAO</h1>\n                <button onClick={joinDAO} style={buttonStyle}>Join DAO</button>\n            </div>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                flexWrap: 'wrap',\n                justifyContent: 'space-around',\n            }}>\n                <div style={cardStyle}>\n                    <p>Staked Amount: {stakedAmount} {ticker}</p>\n                </div>\n                <div style={cardStyle}>\n                    <p>Total Proposal Fees Collected: {totalProposalFees} {ticker}</p>\n                </div>\n                <div style={cardStyle}>\n                    <p>Total Request Fees Collected: {totalRequestFees} {ticker}</p>\n                </div>\n            </div>\n            <div style={cardStyle}>\n                <input\n                    type=\"text\"\n                    value={additionalStake}\n                    onChange={e => setAdditionalStake(e.target.value)}\n                    placeholder={`Amount to stake (${ticker})`}\n                    style={inputStyle}\n                />\n                <button onClick={addStake} style={buttonStyle}>Add Stake</button>\n            </div>\n            <div style={cardStyle}>\n                <input\n                    type=\"text\"\n                    value={withdrawAmount}\n                    onChange={e => setWithdrawAmount(e.target.value)}\n                    placeholder={`Amount to unstake (${ticker})`}\n                    style={inputStyle}\n                />\n                <button onClick={withdrawStake} style={buttonStyle}>Withdraw Stake</button>\n            </div>\n        </div>\n    );\n};\n\nexport default DAO;\n"]},"metadata":{},"sourceType":"module"}