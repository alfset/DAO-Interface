{"ast":null,"code":"// utils/contractUtils.js\nimport { ethers } from 'ethers';\nimport OracleABI from '../abis/Oralce_ABI.json';\nexport const listenToPriceUpdates = (contractAddress, provider, setPriceUpdate) => {\n  const contract = new ethers.Contract(contractAddress, OracleABI, provider);\n  contract.on('PriceUpdated', (priceId, price) => {\n    console.log(`Price Updated: ${priceId} to ${ethers.utils.formatEther(price)}`);\n    setPriceUpdate({\n      priceId: priceId,\n      price: ethers.utils.formatEther(price)\n    });\n  });\n  return () => {\n    // Cleanup listener when the component unmounts\n    contract.removeAllListeners('PriceUpdated');\n  };\n};","map":{"version":3,"sources":["/Users/alf/DAO-Interface/src/utils/contract/updatePriceListener.js"],"names":["ethers","OracleABI","listenToPriceUpdates","contractAddress","provider","setPriceUpdate","contract","Contract","on","priceId","price","console","log","utils","formatEther","removeAllListeners"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,eAAD,EAAkBC,QAAlB,EAA4BC,cAA5B,KAA+C;AAC/E,QAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,QAAX,CAAoBJ,eAApB,EAAqCF,SAArC,EAAgDG,QAAhD,CAAjB;AAEAE,EAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4B,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBH,OAAQ,OAAMT,MAAM,CAACa,KAAP,CAAaC,WAAb,CAAyBJ,KAAzB,CAAgC,EAA5E;AACAL,IAAAA,cAAc,CAAC;AAAEI,MAAAA,OAAO,EAAEA,OAAX;AAAoBC,MAAAA,KAAK,EAAEV,MAAM,CAACa,KAAP,CAAaC,WAAb,CAAyBJ,KAAzB;AAA3B,KAAD,CAAd;AACH,GAHD;AAKA,SAAO,MAAM;AACT;AACAJ,IAAAA,QAAQ,CAACS,kBAAT,CAA4B,cAA5B;AACH,GAHD;AAIH,CAZM","sourcesContent":["// utils/contractUtils.js\nimport { ethers } from 'ethers';\nimport OracleABI from '../abis/Oralce_ABI.json';\n\nexport const listenToPriceUpdates = (contractAddress, provider, setPriceUpdate) => {\n    const contract = new ethers.Contract(contractAddress, OracleABI, provider);\n\n    contract.on('PriceUpdated', (priceId, price) => {\n        console.log(`Price Updated: ${priceId} to ${ethers.utils.formatEther(price)}`);\n        setPriceUpdate({ priceId: priceId, price: ethers.utils.formatEther(price) });\n    });\n\n    return () => {\n        // Cleanup listener when the component unmounts\n        contract.removeAllListeners('PriceUpdated');\n    };\n};\n"]},"metadata":{},"sourceType":"module"}